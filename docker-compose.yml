services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    restart: always
    user: "1000"
    volumes:
      - grafana-data:/var/lib/grafana
      - /grafana/:/etc/grafana/provisioning/datasources:rw
      - ./config/:/etc/grafana/
    networks:
      - web-secure
      - redis
      - monitoring-stack
    ports:
      - 3000:3000

  influxdb:
    container_name: grafana.influxdb
    image: influxdb:latest
    volumes:
      - /influxdb-storage:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=db0
      - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}
    networks:
      - web-secure
      - monitoring-stack
    depends_on:
      - grafana
    restart: always

  telegraf:
    container_name: grafana.telegraf
    image: telegraf:1.18-alpine
    volumes:
    - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
    environment:
      - INFLUX_TOKEN=oMWk-FV35z-Pvq1jXYm_IEuidDe46R6RZXe674YM0bJpqybx_YgPK7OcgrMfZV33gkSOm-HSbSZQWSU2vPsAcA==
    links:
      - influxdb
    # ports:
    # - '127.0.0.1:8125:8125/udp'
    networks:
      - web-secure
      - monitoring-stack
    restart: always

  loki:
    image: grafana/loki:2.7.3
    container_name: grafana.loki
    hostname: grafana.loki
    restart: unless-stopped
    ports:
      - 3100:3100
    volumes:
      - ./config/:/etc/loki/
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - web-secure
      - monitoring-stack
    depends_on:
      - grafana

  promtail:
    image: grafana/promtail:2.7.3
    container_name: grafana.promtail
    hostname: grafana.promtail
    restart: unless-stopped
    ports:
      - 9080:9080
    volumes:
      - ./config/:/etc/promtail/
      - ${TRAEFIK_VOLUME}:/logs/
      - ${NEXTCLOUD_VOLUME}:/logs/
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - monitoring-stack
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus
    container_name: grafana.prometheus
    hostname: grafana.prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring-stack
      - web-secure
    ports:
      - 9090:9090

  node-exporter:
    container_name: grafana.node-exporter
    image: prom/node-exporter:latest
    hostname: grafana.node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    networks:
      - monitoring-stack
    restart: unless-stopped
    deploy:
      mode: global

  alertmanager:
    container_name: grafana.alertmanager
    image: prom/alertmanager
    hostname: grafana.alertmanager
    restart: unless-stopped
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - monitoring-stack
      - web-secure
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  redis:
    image: redis:7.0.5
    restart: always
    container_name: grafana.redis
    command: "redis-server --requirepass '' "
    ports:
      - 6380:6379
    volumes:
      - ./redis_data:/data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      interval: 5s
      retries: 10
    networks:
      - monitoring-stack
      - web-secure

  # cadvisor:
  #   container_name: grafana.cadvisor
  #   image: gcr.io/cadvisor/cadvisor
  #   hostname: grafana.cadvisor
  #   dns:
  #     - 192.168.2.100
  #   restart: unless-stopped
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   deploy:
  #     mode: global
  #   networks:
  #     - monitoring-stack

networks:
  web-secure:
    external: true
  monitoring-stack:
    external: true
  redis:
    external: true

volumes:
  grafana-data:
    external: true
  oncall_data:
    external: false
  redis_data:
    external: false