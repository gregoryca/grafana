version: "3"
x-environment: &oncall-environment
  DATABASE_TYPE: sqlite3
  BROKER_TYPE: redis
  BASE_URL: $DOMAIN
  SECRET_KEY: $SECRET_KEY
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-false}
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-}
  REDIS_URI: ${CELERY_BROKER_URL}
  DJANGO_SETTINGS_MODULE: settings.hobby
  CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
  CELERY_WORKER_CONCURRENCY: "1"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  CELERY_WORKER_BEAT_ENABLED: "True"
  GRAFANA_API_URL: http://grafana:3000
  CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
  
services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    restart: always
    dns:
      - 192.168.2.1
    user: "1000"
    volumes:
      - grafana-data:/var/lib/grafana
      - /grafana/:/etc/grafana/provisioning/datasources:rw
      - ./config/:/etc/grafana/
    networks:
      - web-secure
      - redis
      - monitoring-stack
    ports:
      - 3000:3000

  engine:
    image: grafana/oncall:latest
    container_name: grafana.engine
    hostname: grafana.engine
    restart: always
    ports:
      - "8282:8080"
    command: sh -c "uwsgi --ini uwsgi.ini"
    environment: *oncall-environment
    volumes:
      - oncall_data:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
    networks:
      - web-secure
      - redis
      - monitoring-stack

  celery:
    image: grafana/oncall:latest
    restart: always
    container_name: grafana.celery
    hostname: grafana.celery
    command: sh -c "./celery_with_exporter.sh"
    environment: *oncall-environment
    volumes:
      - ./oncall_data:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
      # redis:
      #   condition: service_healthy
    networks:
      - web-secure
      - redis
      - monitoring-stack

  oncall_db_migration:
    image: grafana/oncall:latest
    command: python manage.py migrate --noinput
    environment: *oncall-environment
    volumes:
      - ./oncall_data:/var/lib/oncall
    networks:
      - monitoring-stack

  loki:
    image: grafana/loki:2.7.3
    container_name: grafana.loki
    hostname: grafana.loki
    dns:
      - 192.168.2.1
    restart: unless-stopped
    ports:
      - 3100:3100
    volumes:
      - ./config/:/etc/loki/
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - monitoring-stack
    depends_on:
      - grafana

  promtail:
    image: grafana/promtail:2.7.3
    container_name: grafana.promtail
    hostname: grafana.promtail
    restart: unless-stopped
    dns:
      - 192.168.2.1
    volumes:
      - ./config/:/etc/promtail/
      - ${TRAEFIK_VOLUME}:/logs/
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - monitoring-stack
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus
    container_name: grafana.prometheus
    hostname: grafana.prometheus
    dns:
      - 192.168.2.1
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring-stack
      - web-secure
    ports:
      - 9090:9090

  node-exporter:
    container_name: grafana.node-exporter
    image: prom/node-exporter:latest
    hostname: grafana.node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    networks:
      - monitoring-stack
    restart: unless-stopped
    deploy:
      mode: global

  alertmanager:
    container_name: grafana.alertmanager
    image: prom/alertmanager
    hostname: grafana.alertmanager
    dns:
      - 192.168.2.1
    restart: unless-stopped
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - monitoring-stack
      - web-secure
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  # redis:
  #   image: redis:7.0.5
  #   restart: always
  #   container_name: grafana.redis
  #   command: "redis-server --requirepass '' "
  #   ports:
  #     - 6380:6379
  #   volumes:
  #     - ./redis_data:/data
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 500m
  #         cpus: "0.5"
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     timeout: 5s
  #     interval: 5s
  #     retries: 10
  #   networks:
  #     - monitoring-stack
  #     - web-secure

  # cadvisor:
  #   container_name: grafana.cadvisor
  #   image: gcr.io/cadvisor/cadvisor
  #   hostname: grafana.cadvisor
  #   dns:
  #     - 192.168.2.100
  #   restart: unless-stopped
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   deploy:
  #     mode: global
  #   networks:
  #     - monitoring-stack

networks:
  web-secure:
    external: true
  monitoring-stack:
    external: true
  redis:
    external: true

volumes:
  grafana-data:
    external: true
  oncall_data:
    external: false
  redis_data:
    external: false